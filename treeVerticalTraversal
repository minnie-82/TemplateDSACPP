//Leetcode 


// Time Complexity: O(N*logN*logN*logN)

// Space Complexity: O(N)
    vector<vector<int>> verticalTraversal(TreeNode* root) {
       
        //Your code here
        map<int,map<int,vector<int>>>nodes;
        queue<pair<TreeNode*,pair<int,int>>>qe;

         qe.push({root,{0,0}});
         while(!qe.empty()){
             auto p=qe.front();
             qe.pop();
             TreeNode*node=p.first;
             int x=p.second.first;
             int y=p.second.second;
             nodes[x][y].push_back(node->val);
             if(node->left){
                 qe.push({node->left,{x-1,y+1}});
             }
             if(node->right){
                 qe.push({node->right,{x+1,y+1}});
             }
         }
         vector<vector<int>>ans;
         for(auto p:nodes){
             vector<int> v;
             for(auto q:p.second){
                 v.insert(v.end(),q.second.begin(),q.second.end());
             }
             ans.push_back(v);
         }
    return ans;
    }



//gfg Vertical Order Traversal  O(N) O(N)
vector<int> verticalOrder(Node *root){
        //Your code here
        map<int,map<int,vector<int>>>nodes;
        queue<pair<Node*,pair<int,int>>>qe;
         qe.push({root,{0,0}});
         while(!qe.empty()){
             auto p=qe.front();
             qe.pop();
             Node*node=p.first;
             int x=p.second.first;
             int y=p.second.second;
             nodes[x][y].push_back(node->data);
             if(node->left){
                 qe.push({node->left,{x-1,y+1}});
             }
             if(node->right){
                 qe.push({node->right,{x+1,y+1}});
             }
         }
         vector<int>ans;
         for(auto p:nodes){
             for(auto q:p.second){
                 ans.insert(ans.end(),q.second.begin(),q.second.end());
             }
         }
    return ans;
    }



        ----------------------------------   OR--------------------------------------------
vector <int> verticalOrder(Node *root)
    {
        vector <int> res;
        //creating a map to store nodes at a particular horizontal distance.
        map<int,vector<int>>mp;
        
        //creating empty queue for level order traversal.
        queue<pair<Node*,int>>q;
        q.push({root,0});
        
        while(!q.empty())
        {
            pair<Node*,int> temp=q.front();
            Node* temp_root=temp.first;
            int distance=temp.second;
            mp[distance].push_back(temp_root->data);
            q.pop();
            
            //if left child of temp_root exists, pushing it in
            //the queue with the horizontal distance.
            if(temp_root->left)
            {
                q.push({temp_root->left,distance-1});
            }
            //if right child of temp_root exists, pushing it in
            //the queue with the horizontal distance.
            if(temp_root->right)
            {
                q.push({temp_root->right,distance+1});
            }
        }
        
        //traversing the map and storing the nodes in list 
        //at every horizontal distance.
        for(auto it=mp.begin();it!=mp.end();it++)
        {
            vector<int> ans=it->second;
            
            for(auto x:ans)
                res.push_back (x);
        }
        //returning the output list.
        return res;
        
    }
