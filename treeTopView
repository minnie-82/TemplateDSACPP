#include <bits/stdc++.h>
using namespace std;
/*
Top View of Binary tree
We can traverse the tree in a level order fashion and mark the nodes vertically as .... -1, +1,0, -2, +2.... and so on. The first node at each marked line will be the top view of our binary tree. 

Time Complexity: O( N logN ), N is number of nodes in tree, since we need to traverse through each node of the tree for once in order to implement a level order traversal , also the height of the tree is logN .
Space Complexity: O(N), N is number of nodes in tree. With each traversal on a level, we need to maintain a queue of pairs that will contain nodes and corresponding +ve or -ve value.
 */


struct Node{
    int data;
    struct Node *left, *right;
    
    Node(int x)
    {
        data=x;
        left=NULL;
        right=NULL;
    }
    
    
};
 vector<int> topView(Node *root)
    {
        //Your code here
        vector<int> ans;
        
        map<int,int> m;
        queue<pair<Node*,int>>q;
        q.push({root,0});
        
        
        while(!q.empty())
        {
            auto p=q.front();
            q.pop();
            Node* t=p.first;
            int l=p.second;
            
            if(m.find(l)==m.end())
            {
                m[l]=t->data;
            }
            
            if(t->left!=NULL)
            {
                q.push({t->left, l-1});
            }
             if(t->right!=NULL)
            {
                q.push({t->right, l+1});
            }
        }
       for(auto i:m)
       
      {
          ans.push_back(i.second);
      }
        return ans;
    
}




    

int main() {
    // Write C++ code here
   struct Node *root=new Node(1);
    root->left=new Node(2);
    root->right=new Node(3);
    root->left->left=new Node(4);
   root->left->right=new Node(5);
   root->right->left=new Node(6);
   root->right->right=new Node(7);
    
    
    
     vector<int> ans=topView(root);
     cout<<"Top View of Binary Tree: ";
     for(auto i: ans)
     {
         cout<<i<<" ";
     }

    return 0;
}
